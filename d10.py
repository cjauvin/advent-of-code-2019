from math import gcd, degrees, atan2, sqrt


s = """
.#..#
.....
#####
....#
...##
"""  # best = (8, (3, 4))

s = """
......#.#.
#..#.#....
..#######.
.#.#.###..
.#..#.....
..#....#.#
#..#....#.
.##.#..###
##...#..#.
.#....####
"""  # best = (33, (5, 8))

s = """
#.#...#.#.
.###....#.
.#....#...
##.#.#.#.#
....#.#.#.
.##..###.#
..#...##..
..##....##
......#...
.####.###.
"""  # best = (35, (1, 2))

s = """
.#..#..###
####.###.#
....###.#.
..###.##.#
##.##.#.#.
....###..#
..#.#..#.#
#..#.#.###
.##...##.#
.....#.#..
"""  # best = (41, (6, 3))

s = """
.#..##.###...#######
##.############..##.
.#.######.########.#
.###.#######.####.#.
#####.##.#.##.###.##
..#####..#.#########
####################
#.####....###.#.#.##
##.#################
#####.##.###..####..
..######..##.#######
####.##.####...##..#
.#####..#.######.###
##...#.##########...
#.##########.#######
.####.#.###.###.#.##
....##.##.###..#####
.#.#.###########.###
#.#.#.#####.####.###
###.##.####.##.#..##
"""  # best = (210, (11, 13))

s = """
#..#.#.#.######..#.#...##
##.#..#.#..##.#..######.#
.#.##.#..##..#.#.####.#..
.#..##.#.#..#.#...#...#.#
#...###.##.##..##...#..#.
##..#.#.#.###...#.##..#.#
###.###.#.##.##....#####.
.#####.#.#...#..#####..#.
.#.##...#.#...#####.##...
######.#..##.#..#.#.#....
###.##.#######....##.#..#
.####.##..#.##.#.#.##...#
##...##.######..##..#.###
...###...#..#...#.###..#.
.#####...##..#..#####.###
.#####..#.#######.###.##.
#...###.####.##.##.#.##.#
.#.#.#.#.#.##.#..#.#..###
##.#.####.###....###..##.
#..##.#....#..#..#.#..#.#
##..#..#...#..##..####..#
....#.....##..#.##.#...##
.##..#.#..##..##.#..##..#
.##..#####....#####.#.#.#
#..#..#..##...#..#.#.#.##
"""  # best = (253, (11, 19))

ss = """
.#....#####...#..
##...##.#####..##
##...#...#.#####.
..#.....X...###..
..#.#.....#....##
"""

g = set()

y = 0
for line in s.split("\n"):
    line = line.strip()
    if not line:
        continue
    for x, c in enumerate(line):
        if c == "#":
            g.add((x, y))
    y += 1


def frac(a, b):
    g = gcd(a, b)
    return (a // g, b // g)


best = (-1, (-1, -1))
for p in g:
    fs = set()
    for q in g:
        if p == q:
            continue
        f = frac(q[0] - p[0], q[1] - p[1])
        fs.add(f)
    best = max(best, (len(fs), p))

print(best)


def to_360_clockwise_angle(f):
    x, y = f
    if x >= 0 and y >= 0:
        return -degrees(atan2(y, x)) + 90  # q1
    elif x < 0 and y >= 0:
        return 270 + (180 - degrees(atan2(y, x)))  # q4
    else:
        return -degrees(atan2(y, x)) + 90  # q2 and q3


assert to_360_clockwise_angle((0, 1)) == 0
assert to_360_clockwise_angle((1, 1)) == 45
assert to_360_clockwise_angle((1, 0)) == 90
assert to_360_clockwise_angle((1, -1)) == 135
assert to_360_clockwise_angle((0, -1)) == 180
assert to_360_clockwise_angle((-1, -1)) == 225
assert to_360_clockwise_angle((-1, 0)) == 270
assert to_360_clockwise_angle((-1, 1)) == 315

# p = (11, 13)
# p = (8, 3)
p = (11, 19)


def dist(p0, p1):
    return sqrt((p0[0] - p1[0]) ** 2 + (p0[1] - p1[1]) ** 2)


while False:
    f2q = {}
    for q in g:
        if p == q:
            continue
        f = frac(q[0] - p[0], p[1] - q[1])
        if f in f2q:
            if dist(p, q) < dist(p, f2q[f]):
                f2q[f] = q
        else:
            f2q[f] = q
    fs = sorted(f2q, key=to_360_clockwise_angle)
    for i, f in enumerate(fs[:200], 1):
        print(i, f2q[f])  # , f, to_360_clockwise_angle(f))
    break
